                E-commerce Project using React, Node.js, and MongoDB
                 Project Overview :


This project aims to develop a comprehensive e-commerce application using React for the frontend and Node.js for the backend, with MongoDB as the database. The application includes essential e-commerce functionalities such as product listing, cart management, user authentication, order processing, and payment integration.

Key Features and Implementation Steps
1. Product Listing and Display
Frontend:

Product Components: Created components to render and style products, including product listing and detailed product view components.
Bootstrap UI Framework: Used Bootstrap for consistent styling and responsiveness across the application.
Tailwind Components: Utilized Tailwind for the hero section and product listing for a modern and flexible design.
React Multi Carousel: Implemented a carousel for the home page to highlight featured products.
Backend:

Node.js Server: Set up a server using Node.js and Express to handle API requests.
Product APIs: Developed APIs to fetch products from the MongoDB database.
2. State Management
Reducer Hook: Managed the application state using the predictable state transitions and better organization.
3. Routing

React Router: Implemented page routing to navigate between screens like home, product details, cart, and user profile.
4. User Authentication

JWT Tokens: Used JSON Web Tokens (JWT) for secure user authentication and session management.
Sign-In/Sign-Up Screens: Created user authentication screens for signing in and signing up.
5. Shopping Cart React Context: Utilized React Context API to manage cart state and provide cart-related functions across the application.

Cart Screen: Developed a dedicated screen to display cart items, manage quantities, and proceed to checkout.
6. Order Processing Order Screens: Created screens for shipping details, selecting payment methods, placing orders, and viewing order details.

Order APIs: Developed backend APIs for creating and managing orders.
7. Payment Integration PayPal Integration: Integrated PayPal for payment processing using the PayPal JS library to handle transactions securely.

Payment Method Screen: Provided options for users to select their preferred payment method.
8. User Profile and Order History Profile Screen: Created a user profile screen to display user details and allow profile updates.
Order History: Developed a screen to display the user's order history with detailed information about past orders.
9. Database Management

MongoDB: Connected to a MongoDB database to store product, user, and order information.
Seeding Data: Seeded the database with sample products and users for initial setup and testing.


Backend Development:
Dependencies:
Body Parser: Used for parsing incoming request bodies in a middleware before handlers.
Bcrypt: Implemented for hashing passwords to enhance security.
CORS: Enabled Cross-Origin Resource Sharing (CORS) for the backend to handle requests from different origins.
API Testing: Tested all backend APIs using Postman to ensure they function correctly and efficiently.


